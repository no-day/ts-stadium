{"version":3,"sources":["webpack:////home/runner/work/ts-stadium/ts-stadium/node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/blog-list-item.tsx","webpack:////home/runner/work/ts-stadium/ts-stadium/node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/listing.tsx","webpack:////home/runner/work/ts-stadium/ts-stadium/node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/list.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/texts/hero.mdx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/texts/bottom.mdx","webpack:////home/runner/work/ts-stadium/ts-stadium/node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/homepage.tsx","webpack:////home/runner/work/ts-stadium/ts-stadium/node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/homepage-query.tsx","webpack:////home/runner/work/ts-stadium/ts-stadium/node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/homepage.tsx","webpack:////home/runner/work/ts-stadium/ts-stadium/node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx"],"names":["BlogListItem","post","showTags","mb","as","Link","to","slug","sx","fontSize","color","title","mt","a","date","tags","Fragment","Listing","posts","className","map","key","List","children","ul","margin","padding","li","listStyle","variant","layoutProps","_frontmatter","MDXContent","components","props","mdxType","isMDXComponent","Homepage","useMinimalBlogConfig","basePath","blogPath","siteTitle","useSiteMetadata","visuallyHidden","p","text","replaceSlashes","HomepageComponent","allPost","data","nodes","ItemTags","tagsPath","tag","i","name"],"mappings":"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","file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-homepage-query-tsx-9d76a308e1d83fe2851e.js","sourcesContent":["/** @jsx jsx */\nimport React from \"react\"\nimport { jsx, Link as TLink } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <TLink as={Link} to={post.slug} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {post.title}\n    </TLink>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx } from \"theme-ui\"\n\ntype ListProps = {\n  children: React.ReactNode\n}\n\nconst List = ({ children }: ListProps) => (\n  <section\n    sx={{\n      mb: [5, 5, 6],\n      ul: { margin: 0, padding: 0 },\n      li: { listStyle: `none`, mb: 3 },\n      a: { variant: `links.listItem` },\n    }}\n  >\n    {children}\n  </section>\n)\n\nexport default List\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Hellooo???`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport Layout from \"./layout\"\nimport Title from \"./title\"\nimport Listing from \"./listing\"\nimport List from \"./list\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport { visuallyHidden } from \"../styles/utils\"\n// @ts-ignore\nimport Hero from \"../texts/hero\"\n// @ts-ignore\nimport Bottom from \"../texts/bottom\"\n\ntype PostsProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  [key: string]: any\n}\n\nconst Homepage = ({ posts }: PostsProps) => {\n  const { basePath, blogPath } = useMinimalBlogConfig()\n  const { siteTitle } = useSiteMetadata()\n\n  return (\n    <Layout>\n      <h1 sx={visuallyHidden}>{siteTitle}</h1>\n      <section sx={{ mb: [5, 6, 7], p: { fontSize: [1, 2, 3], mt: 2 }, variant: `section_hero` }}>\n        <Hero />\n      </section>\n      <Title text=\"Latest Posts\">\n        <Link to={replaceSlashes(`/${basePath}/${blogPath}`)}>Read all posts</Link>\n      </Title>\n      <Listing posts={posts} showTags={false} />\n      <List sx={{ variant: `section_bottom` }}>\n        <Bottom />\n      </List>\n    </Layout>\n  )\n}\n\nexport default Homepage\n","import { graphql } from \"gatsby\"\nimport HomepageComponent from \"../components/homepage\"\n\nexport default HomepageComponent\n\nexport const query = graphql`\n  query($formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, limit: 3) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Homepage from \"../../../components/homepage\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCoreHomepage({ ...props }: Props) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Homepage posts={allPost.nodes} {...props} />\n}\n","import React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n"],"sourceRoot":""}